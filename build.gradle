plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'practice'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // Spring Data JPA
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring DevTools (optional)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Lombok annotation processing
    annotationProcessor 'org.projectlombok:lombok'

    // Lombok 의존성 (테스트 환경에만 추가)
    testImplementation 'org.projectlombok:lombok:1.18.24' // 최신 버전 확인 후 사용
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24' // 테스트에서 Lombok 어노테이션 처리기 사용

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    // Lombok and MapStruct integration
//    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    compileOnly 'org.projectlombok:lombok'

    // MapStruct dependencies
    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"

    //swagger spring 3.X version
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar{
    enabled = true
}

jar{
    enabled = false
}

def frontendDir = "$projectDir/src/main/boardfront"
// Define source sets
sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

// Make processResources depend on copyReactBuildFiles
processResources {
    dependsOn "copyReactBuildFiles"
}

// Install React dependencies
task installReact(type: Exec) {
    workingDir frontendDir
    inputs.dir frontendDir
    group = BasePlugin.BUILD_GROUP

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "cmd", "/c", "npm install"
    } else {
        commandLine "npm", "install"
    }
}

// Build React project
task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir frontendDir
    inputs.dir frontendDir
    group = BasePlugin.BUILD_GROUP

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "cmd", "/c", "npm run build"
    } else {
        commandLine "npm", "run build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"

    // Copy all static files (js, css, etc)
    from("${frontendDir}/build") {
    }


    // Set the main destination directory
    into "${projectDir}/src/main/resources/static"
}