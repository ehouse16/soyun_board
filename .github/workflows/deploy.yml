name: CI/CD Pipeline for EC2

on:
  push:
    branches:
      - master # master 브랜치에 푸시될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: SSH 설정
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Verify SSH host
        env:
          HOST: ${{ secrets.EC2_IP }}
        run: |
          mkdir -p ~/.ssh
          rm -f ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: EC2에 배포
        run: |
          # SCP를 사용하여 JAR 파일을 EC2로 전송
          scp build/libs/*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:/home/ec2-user/deploy.jar
          
          # EC2에서 명령어 실행하여 Spring Boot 애플리케이션을 백그라운드에서 실행
           ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} << 'EOF'
             nohup java -jar /home/ec2-user/deploy.jar &
           EOF

# deploy.sh 스크립트를 만들어서 instance 안에 넣고 ci/cd는 이걸 실행만하게 해라